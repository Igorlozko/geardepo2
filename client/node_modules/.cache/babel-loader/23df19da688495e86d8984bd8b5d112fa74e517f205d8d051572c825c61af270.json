{"ast":null,"code":"// store all the functions that are responsible \n//for communicating with the server and the requests directed to the user\n\nimport fetchData from \"./utils/fetchData\";\nimport { v4 as uuidv4 } from 'uuid';\nimport uploadFile from \"../firebase/uploadFile\";\nconst url = process.env.REACT_APP_SERVER_URL + '/user';\nexport const register = async (user, dispatch) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n\n  //SEND REQUEST WITH FETCH\n  const result = await fetchData({\n    url: url + '/register',\n    body: user\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: result\n    });\n    dispatch({\n      type: 'CLOSE_LOGIN'\n    });\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'success',\n        message: 'Your account has been created'\n      }\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};\nexport const login = async (user, dispatch) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n\n  //SEND REQUEST WITH FETCH\n  const result = await fetchData({\n    url: url + '/login',\n    body: user\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: result\n    });\n    dispatch({\n      type: 'CLOSE_LOGIN'\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};\nexport const updateProfile = async (currentUser, UpdatedFields, dispatch) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n  const {\n    name,\n    file\n  } = UpdatedFields;\n  let body = {\n    name\n  };\n  try {\n    if (file) {\n      var _file$name, _file$name$split;\n      const imageName = uuidv4() + '.' + (file === null || file === void 0 ? void 0 : (_file$name = file.name) === null || _file$name === void 0 ? void 0 : (_file$name$split = _file$name.split('.')) === null || _file$name$split === void 0 ? void 0 : _file$name$split.pop());\n      // upload to firebase \n      const photoURL = await uploadFile(file, `profile${currentUser === null || currentUser === void 0 ? void 0 : currentUser.id}/${imageName}`);\n      body = {\n        ...body,\n        photoURL\n      };\n    }\n    const result = await fetchData({\n      url: url + '/updateProfile',\n      method: 'PATCH',\n      body,\n      token: currentUser.token\n    }, dispatch);\n    if (result) {\n      dispatch({\n        type: 'UPDATE_USER',\n        payload: {\n          ...currentUser,\n          ...result\n        }\n      });\n      dispatch({\n        type: 'UPDATE_ALERT',\n        payload: {\n          open: true,\n          severity: 'success',\n          message: 'Your profile has been updated'\n        }\n      });\n      dispatch({\n        type: 'UPDATE_PROFILE',\n        payload: {\n          open: false,\n          file: null,\n          photoURL: result.photoURL\n        }\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'error',\n        message: error.message\n      }\n    });\n    console.log(error);\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};","map":{"version":3,"names":["fetchData","v4","uuidv4","uploadFile","url","process","env","REACT_APP_SERVER_URL","register","user","dispatch","type","result","body","payload","open","severity","message","login","updateProfile","currentUser","UpdatedFields","name","file","_file$name","_file$name$split","imageName","split","pop","photoURL","id","method","token","error","console","log"],"sources":["C:/Users/igorl/Downloads/place-to-stay-part2/client/src/actions/user.js"],"sourcesContent":["\r\n// store all the functions that are responsible \r\n//for communicating with the server and the requests directed to the user\r\n\r\nimport fetchData from \"./utils/fetchData\"\r\nimport {v4 as uuidv4 } from 'uuid';\r\nimport uploadFile from \"../firebase/uploadFile\";\r\n\r\nconst url = process.env.REACT_APP_SERVER_URL + '/user'\r\n\r\nexport const register = async(user, dispatch) =>{\r\n    dispatch({type:'START_LOADING'})\r\n\r\n    //SEND REQUEST WITH FETCH\r\n    const result = await fetchData({\r\n        url:url+'/register',\r\n        body: user,\r\n    },dispatch)\r\n    if(result){\r\n        dispatch({\r\n            type:'UPDATE_USER',\r\n            payload: result\r\n        }) \r\n        dispatch({\r\n            type: 'CLOSE_LOGIN',\r\n        })\r\n        dispatch({\r\n            type: 'UPDATE_ALERT',\r\n            payload:{open:true, severity:'success', message:'Your account has been created'},\r\n        });\r\n    }\r\n\r\n    dispatch({type:'END_LOADING'});\r\n};\r\n\r\nexport const login = async(user, dispatch) =>{\r\n    dispatch({type:'START_LOADING'});\r\n\r\n    //SEND REQUEST WITH FETCH\r\n    const result = await fetchData({\r\n        url:url+'/login',\r\n        body: user,\r\n    },dispatch)\r\n    if(result){\r\n        dispatch({\r\n            type:'UPDATE_USER',\r\n            payload: result\r\n        }); \r\n        dispatch({\r\n            type: 'CLOSE_LOGIN',\r\n        });\r\n    }\r\n    dispatch({type:'END_LOADING'});\r\n};\r\n\r\nexport const updateProfile = async(currentUser, UpdatedFields, dispatch)=>{\r\n    dispatch({type:'START_LOADING'});\r\n\r\n    const {name, file} = UpdatedFields;\r\n    let body = {name}\r\n    try{\r\n        if(file){\r\n            const imageName = uuidv4() + '.' + file?.name?.split('.')?.pop();\r\n            // upload to firebase \r\n            const photoURL = await uploadFile(file, `profile${currentUser?.id}/${imageName}`);\r\n            body ={...body, photoURL}\r\n        }\r\n        const result = await fetchData({url:url+'/updateProfile', method: 'PATCH', body , token: currentUser.token }, dispatch);\r\n        if(result){\r\n            dispatch({type:'UPDATE_USER',payload:{...currentUser, ...result} });\r\n            dispatch({\r\n                type: 'UPDATE_ALERT',\r\n                payload:{open:true, severity:'success', message:'Your profile has been updated'},\r\n            });\r\n            dispatch({type: 'UPDATE_PROFILE', payload:{open: false, file:null, photoURL: result.photoURL}})\r\n        }\r\n    }catch(error){\r\n        dispatch({\r\n            type: 'UPDATE_ALERT',\r\n            payload:{open:true, severity:'error', message:error.message},\r\n        });\r\n        console.log(error);\r\n    }\r\n\r\n    dispatch({type:'END_LOADING'});\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}